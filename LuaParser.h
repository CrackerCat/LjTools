

// This file was automatically generated by Coco/R; don't modify it.
#if !defined(Lua_COCO_PARSER_H__)
#define Lua_COCO_PARSER_H__

#include <QStack>
#include <LjTools/LuaSynTree.h>


#include <LjTools/LuaLexer.h>

namespace Lua {



class Parser {
private:
	enum {
		_EOF=0,
		_T_Literals_=1,
		_T_Hash=2,
		_T_Percent=3,
		_T_Lpar=4,
		_T_Rpar=5,
		_T_Star=6,
		_T_Plus=7,
		_T_Comma=8,
		_T_Minus=9,
		_T_2Minus=10,
		_T_2MinusLbrack=11,
		_T_Dot=12,
		_T_2Dot=13,
		_T_3Dot=14,
		_T_Slash=15,
		_T_Colon=16,
		_T_Semi=17,
		_T_Lt=18,
		_T_Leq=19,
		_T_Eq=20,
		_T_2Eq=21,
		_T_Gt=22,
		_T_Geq=23,
		_T_Lbrack=24,
		_T_Rbrack=25,
		_T_Rbrack2Minus=26,
		_T_Hat=27,
		_T_Lbrace=28,
		_T_Rbrace=29,
		_T_TildeEq=30,
		_T_Keywords_=31,
		_T_and=32,
		_T_break=33,
		_T_do=34,
		_T_else=35,
		_T_elseif=36,
		_T_end=37,
		_T_false=38,
		_T_for=39,
		_T_function=40,
		_T_if=41,
		_T_in=42,
		_T_local=43,
		_T_nil=44,
		_T_not=45,
		_T_or=46,
		_T_repeat=47,
		_T_return=48,
		_T_then=49,
		_T_true=50,
		_T_until=51,
		_T_while=52,
		_T_Specials_=53,
		_T_Name=54,
		_T_Number=55,
		_T_String=56,
		_T_Comment=57,
		_T_Designator=58,
		_T_Eof=59,
		_T_MaxToken_=60
	};
	int maxT;

	int errDist;
	int minErrDist;

	void SynErr(int n, const char* ctx = 0);
	void Get();
	void Expect(int n, const char* ctx = 0);
	bool StartOf(int s);
	void ExpectWeak(int n, int follow);
	bool WeakSeparator(int n, int syFol, int repFol);
    void SynErr(const QString& sourcePath, int line, int col, int n, Ljas::Errors* err, const char* ctx, const QString& = QString() );

public:
	Lexer *scanner;
	Ljas::Errors  *errors;

	Token d_cur;
	Token d_next;
	QList<Token> d_comments;
	struct TokDummy
	{
		int kind;
	};
	TokDummy d_dummy;
	TokDummy *la;			// lookahead token
	
	int peek( quint8 la = 1 );

    void RunParser()
    {
        d_stack.push(&d_root);
        Parse();
        d_stack.pop();
    }
        
Lua::SynTree d_root;
	QStack<Lua::SynTree*> d_stack;
	void addTerminal() {
		if( d_cur.d_type != Lua::Tok_Semi && d_cur.d_type != Lua::Tok_Comma ){
			Lua::SynTree* n = new Lua::SynTree( d_cur ); d_stack.top()->d_children.append(n);
		}
	}



	Parser(Lexer *scanner,Ljas::Errors*);
	~Parser();
	void SemErr(const char* msg);

	void Lua();
	void chunk();
	void stat();
	void laststat();
	void block();
	void assigOrCall_();
	void dostat_();
	void whilestat_();
	void repeatstat_();
	void ifstat_();
	void forstat_();
	void gfuncdecl_();
	void localdecl_();
	void exp();
	void explist();
	void funcname();
	void funcbody();
	void lfuncdecl_();
	void lvardecl_();
	void namelist();
	void prefixexp();
	void assignment_();
	void call_();
	void args();
	void desig_();
	void exp_nlr_();
	void lambdecl_();
	void tableconstructor();
	void unop();
	void binop();
	void index_();
	void parlist();
	void fieldlist();
	void field();
	void fieldsep();

	void Parse();

}; // end Parser

} // namespace


#endif


// This file was automatically generated by EbnfStudio; don't modify it!
#include "LjasTokenType.h"

namespace Ljas {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Lpar: return "(";
			case Tok_Rpar: return ")";
			case Tok_2Minus: return "--";
			case Tok_2MinusLbrack: return "--[";
			case Tok_Dot: return ".";
			case Tok_Colon: return ":";
			case Tok_Eq: return "=";
			case Tok_Rbrack2Minus: return "]--";
			case Tok_Lbrace: return "{";
			case Tok_Rbrace: return "}";
			case Tok_ADD: return "ADD";
			case Tok_CALL: return "CALL";
			case Tok_CALLT: return "CALLT";
			case Tok_CAT: return "CAT";
			case Tok_DIV: return "DIV";
			case Tok_FNEW: return "FNEW";
			case Tok_FORI: return "FORI";
			case Tok_FORL: return "FORL";
			case Tok_GGET: return "GGET";
			case Tok_GSET: return "GSET";
			case Tok_ISEQ: return "ISEQ";
			case Tok_ISF: return "ISF";
			case Tok_ISFC: return "ISFC";
			case Tok_ISGE: return "ISGE";
			case Tok_ISGT: return "ISGT";
			case Tok_ISLE: return "ISLE";
			case Tok_ISLT: return "ISLT";
			case Tok_ISNE: return "ISNE";
			case Tok_IST: return "IST";
			case Tok_ISTC: return "ISTC";
			case Tok_JMP: return "JMP";
			case Tok_KNIL: return "KNIL";
			case Tok_KSET: return "KSET";
			case Tok_LEN: return "LEN";
			case Tok_LOOP: return "LOOP";
			case Tok_MOD: return "MOD";
			case Tok_MOV: return "MOV";
			case Tok_MUL: return "MUL";
			case Tok_NOT: return "NOT";
			case Tok_POW: return "POW";
			case Tok_RET: return "RET";
			case Tok_SUB: return "SUB";
			case Tok_TDUP: return "TDUP";
			case Tok_TGET: return "TGET";
			case Tok_TNEW: return "TNEW";
			case Tok_TSET: return "TSET";
			case Tok_UCLO: return "UCLO";
			case Tok_UGET: return "UGET";
			case Tok_UNM: return "UNM";
			case Tok_USET: return "USET";
			case Tok_begin: return "begin";
			case Tok_const: return "const";
			case Tok_end: return "end";
			case Tok_false: return "false";
			case Tok_function: return "function";
			case Tok_nil: return "nil";
			case Tok_true: return "true";
			case Tok_var: return "var";
			case Tok_ident: return "ident";
			case Tok_string: return "string";
			case Tok_real: return "real";
			case Tok_posint: return "posint";
			case Tok_negint: return "negint";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_2Minus: return "Tok_2Minus";
			case Tok_2MinusLbrack: return "Tok_2MinusLbrack";
			case Tok_Dot: return "Tok_Dot";
			case Tok_Colon: return "Tok_Colon";
			case Tok_Eq: return "Tok_Eq";
			case Tok_Rbrack2Minus: return "Tok_Rbrack2Minus";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_ADD: return "Tok_ADD";
			case Tok_CALL: return "Tok_CALL";
			case Tok_CALLT: return "Tok_CALLT";
			case Tok_CAT: return "Tok_CAT";
			case Tok_DIV: return "Tok_DIV";
			case Tok_FNEW: return "Tok_FNEW";
			case Tok_FORI: return "Tok_FORI";
			case Tok_FORL: return "Tok_FORL";
			case Tok_GGET: return "Tok_GGET";
			case Tok_GSET: return "Tok_GSET";
			case Tok_ISEQ: return "Tok_ISEQ";
			case Tok_ISF: return "Tok_ISF";
			case Tok_ISFC: return "Tok_ISFC";
			case Tok_ISGE: return "Tok_ISGE";
			case Tok_ISGT: return "Tok_ISGT";
			case Tok_ISLE: return "Tok_ISLE";
			case Tok_ISLT: return "Tok_ISLT";
			case Tok_ISNE: return "Tok_ISNE";
			case Tok_IST: return "Tok_IST";
			case Tok_ISTC: return "Tok_ISTC";
			case Tok_JMP: return "Tok_JMP";
			case Tok_KNIL: return "Tok_KNIL";
			case Tok_KSET: return "Tok_KSET";
			case Tok_LEN: return "Tok_LEN";
			case Tok_LOOP: return "Tok_LOOP";
			case Tok_MOD: return "Tok_MOD";
			case Tok_MOV: return "Tok_MOV";
			case Tok_MUL: return "Tok_MUL";
			case Tok_NOT: return "Tok_NOT";
			case Tok_POW: return "Tok_POW";
			case Tok_RET: return "Tok_RET";
			case Tok_SUB: return "Tok_SUB";
			case Tok_TDUP: return "Tok_TDUP";
			case Tok_TGET: return "Tok_TGET";
			case Tok_TNEW: return "Tok_TNEW";
			case Tok_TSET: return "Tok_TSET";
			case Tok_UCLO: return "Tok_UCLO";
			case Tok_UGET: return "Tok_UGET";
			case Tok_UNM: return "Tok_UNM";
			case Tok_USET: return "Tok_USET";
			case Tok_begin: return "Tok_begin";
			case Tok_const: return "Tok_const";
			case Tok_end: return "Tok_end";
			case Tok_false: return "Tok_false";
			case Tok_function: return "Tok_function";
			case Tok_nil: return "Tok_nil";
			case Tok_true: return "Tok_true";
			case Tok_var: return "Tok_var";
			case Tok_ident: return "Tok_ident";
			case Tok_string: return "Tok_string";
			case Tok_real: return "Tok_real";
			case Tok_posint: return "Tok_posint";
			case Tok_negint: return "Tok_negint";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '(':
			res = Tok_Lpar; i += 1;
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '-' ){
				if( at(str,i+2) == '[' ){
					res = Tok_2MinusLbrack; i += 3;
				} else {
					res = Tok_2Minus; i += 2;
				}
			}
			break;
		case '.':
			res = Tok_Dot; i += 1;
			break;
		case ':':
			res = Tok_Colon; i += 1;
			break;
		case '=':
			res = Tok_Eq; i += 1;
			break;
		case 'A':
			if( at(str,i+1) == 'D' ){
				if( at(str,i+2) == 'D' ){
					res = Tok_ADD; i += 3;
				}
			}
			break;
		case 'C':
			if( at(str,i+1) == 'A' ){
				switch( at(str,i+2) ){
				case 'L':
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'T' ){
							res = Tok_CALLT; i += 5;
						} else {
							res = Tok_CALL; i += 4;
						}
					}
					break;
				case 'T':
					res = Tok_CAT; i += 3;
					break;
				}
			}
			break;
		case 'D':
			if( at(str,i+1) == 'I' ){
				if( at(str,i+2) == 'V' ){
					res = Tok_DIV; i += 3;
				}
			}
			break;
		case 'F':
			switch( at(str,i+1) ){
			case 'N':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'W' ){
						res = Tok_FNEW; i += 4;
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'R' ){
					switch( at(str,i+3) ){
					case 'I':
						res = Tok_FORI; i += 4;
						break;
					case 'L':
						res = Tok_FORL; i += 4;
						break;
					}
				}
				break;
			}
			break;
		case 'G':
			switch( at(str,i+1) ){
			case 'G':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_GGET; i += 4;
					}
				}
				break;
			case 'S':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_GSET; i += 4;
					}
				}
				break;
			}
			break;
		case 'I':
			if( at(str,i+1) == 'S' ){
				switch( at(str,i+2) ){
				case 'E':
					if( at(str,i+3) == 'Q' ){
						res = Tok_ISEQ; i += 4;
					}
					break;
				case 'F':
					if( at(str,i+3) == 'C' ){
						res = Tok_ISFC; i += 4;
					} else {
						res = Tok_ISF; i += 3;
					}
					break;
				case 'G':
					switch( at(str,i+3) ){
					case 'E':
						res = Tok_ISGE; i += 4;
						break;
					case 'T':
						res = Tok_ISGT; i += 4;
						break;
					}
					break;
				case 'L':
					switch( at(str,i+3) ){
					case 'E':
						res = Tok_ISLE; i += 4;
						break;
					case 'T':
						res = Tok_ISLT; i += 4;
						break;
					}
					break;
				case 'N':
					if( at(str,i+3) == 'E' ){
						res = Tok_ISNE; i += 4;
					}
					break;
				case 'T':
					if( at(str,i+3) == 'C' ){
						res = Tok_ISTC; i += 4;
					} else {
						res = Tok_IST; i += 3;
					}
					break;
				}
			}
			break;
		case 'J':
			if( at(str,i+1) == 'M' ){
				if( at(str,i+2) == 'P' ){
					res = Tok_JMP; i += 3;
				}
			}
			break;
		case 'K':
			switch( at(str,i+1) ){
			case 'N':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'L' ){
						res = Tok_KNIL; i += 4;
					}
				}
				break;
			case 'S':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_KSET; i += 4;
					}
				}
				break;
			}
			break;
		case 'L':
			switch( at(str,i+1) ){
			case 'E':
				if( at(str,i+2) == 'N' ){
					res = Tok_LEN; i += 3;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'P' ){
						res = Tok_LOOP; i += 4;
					}
				}
				break;
			}
			break;
		case 'M':
			switch( at(str,i+1) ){
			case 'O':
				switch( at(str,i+2) ){
				case 'D':
					res = Tok_MOD; i += 3;
					break;
				case 'V':
					res = Tok_MOV; i += 3;
					break;
				}
				break;
			case 'U':
				if( at(str,i+2) == 'L' ){
					res = Tok_MUL; i += 3;
				}
				break;
			}
			break;
		case 'N':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'T' ){
					res = Tok_NOT; i += 3;
				}
			}
			break;
		case 'P':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'W' ){
					res = Tok_POW; i += 3;
				}
			}
			break;
		case 'R':
			if( at(str,i+1) == 'E' ){
				if( at(str,i+2) == 'T' ){
					res = Tok_RET; i += 3;
				}
			}
			break;
		case 'S':
			if( at(str,i+1) == 'U' ){
				if( at(str,i+2) == 'B' ){
					res = Tok_SUB; i += 3;
				}
			}
			break;
		case 'T':
			switch( at(str,i+1) ){
			case 'D':
				if( at(str,i+2) == 'U' ){
					if( at(str,i+3) == 'P' ){
						res = Tok_TDUP; i += 4;
					}
				}
				break;
			case 'G':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_TGET; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'W' ){
						res = Tok_TNEW; i += 4;
					}
				}
				break;
			case 'S':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_TSET; i += 4;
					}
				}
				break;
			}
			break;
		case 'U':
			switch( at(str,i+1) ){
			case 'C':
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'O' ){
						res = Tok_UCLO; i += 4;
					}
				}
				break;
			case 'G':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_UGET; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,i+2) == 'M' ){
					res = Tok_UNM; i += 3;
				}
				break;
			case 'S':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_USET; i += 4;
					}
				}
				break;
			}
			break;
		case ']':
			if( at(str,i+1) == '-' ){
				if( at(str,i+2) == '-' ){
					res = Tok_Rbrack2Minus; i += 3;
				}
			}
			break;
		case 'b':
			if( at(str,i+1) == 'e' ){
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'n' ){
							res = Tok_begin; i += 5;
						}
					}
				}
			}
			break;
		case 'c':
			if( at(str,i+1) == 'o' ){
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 't' ){
							res = Tok_const; i += 5;
						}
					}
				}
			}
			break;
		case 'e':
			if( at(str,i+1) == 'n' ){
				if( at(str,i+2) == 'd' ){
					res = Tok_end; i += 3;
				}
			}
			break;
		case 'f':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'l' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_false; i += 5;
						}
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_function; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'n':
			if( at(str,i+1) == 'i' ){
				if( at(str,i+2) == 'l' ){
					res = Tok_nil; i += 3;
				}
			}
			break;
		case 't':
			if( at(str,i+1) == 'r' ){
				if( at(str,i+2) == 'u' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_true; i += 4;
					}
				}
			}
			break;
		case 'v':
			if( at(str,i+1) == 'a' ){
				if( at(str,i+2) == 'r' ){
					res = Tok_var; i += 3;
				}
			}
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
